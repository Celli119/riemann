load(cj_function)$
load(hj_fortran2)$

optimprefix: tt$

absolute(x, eps) := sqrt(x^2+eps)$
one_norm(x, eps) := absolute(x[1,1], eps)+absolute(x[2,1], eps)+absolute(x[3,1], eps)$

/* surf_normal_align_d1(x, epsilon) := block( */
/*   [n], */
/*   n: ratsimp(CROSS(col(x, 2)-col(x, 1), col(x, 3)-col(x, 2))/2), */
/*   absolute(n[1, 1], epsilon) */
/* )$ */

/* surf_normal_align_d2(x, epsilon) := block( */
/*   [n], */
/*   n: ratsimp(CROSS(col(x, 2)-col(x, 1), col(x, 3)-col(x, 2))/2), */
/*   absolute(n[2, 1], epsilon) */
/* )$ */

/* surf_normal_align_d3(x, epsilon) := block( */
/*   [n], */
/*   n: ratsimp(CROSS(col(x, 2)-col(x, 1), col(x, 3)-col(x, 2))/2), */
/*   absolute(n[3, 1], epsilon) */
/* )$ */

/* NODS: matrix([ax, bx, cx], [ay, by, cy], [az, bz, cz]); */

/* VAL: surf_normal_align_d1(NODS, eps)$ */
/* GRA: GRAD(VAL, NODS)$ */
/* HES: GRAD(GRA, NODS)$ */
/* f90(optimize(FLATTEN(HES))); */

/* VAL: surf_normal_align_d2(NODS, eps)$ */
/* GRA: GRAD(VAL, NODS)$ */
/* HES: GRAD(GRA, NODS)$ */
/* f90(optimize(FLATTEN(HES))); */

/* VAL: surf_normal_align_d3(NODS, eps)$ */
/* GRA: GRAD(VAL, NODS)$ */
/* HES: GRAD(GRA, NODS)$ */
/* f90(optimize(FLATTEN(HES))); */


f: openw("polycube.f90")$

block(
  [X, eps],
  X:   genmatrix(X, 3, 3),
  eps: genmatrix(eps, 1, 1),
  surf_normal_align(X, eps) := block(
    [n],
    n: ratsimp(CROSS(col(X, 2)-col(X, 1), col(X, 3)-col(X, 2))/2),
    matrix([ one_norm(n, eps[1,1]) ])
  ),
  with_stdout(f, val_jac_hes_to_f90(surf_normal_align, [X, eps])),
  return()
)$

block(
  [X],
  X: genmatrix(X, 3, 3),
  triangle_area(X) := block(
    [n],
    n: ratsimp(CROSS(col(X, 2)-col(X, 1), col(X, 3)-col(X, 2))),
    matrix([ NORM(n)/2 ])
  ),
  with_stdout(f, val_jac_hes_to_f90(triangle_area, [X])),
  return()
)$

block(
  [X, D, R],
  X: genmatrix(X, 3, 4),
  D: genmatrix(D, 3, 3),
  R: genmatrix(R, 3, 3),
  tet_distortion(X, D, R) := block(
    [Ds, F],
    Ds: addcol(col(X, 2)-col(X, 1), col(X, 3)-col(X, 1), col(X, 4)-col(X, 1)),
    F: Ds.D,
    matrix([ 0.5*mat_norm(F-R, frobenius)^2 ])
  ),
  with_stdout(f, val_jac_hes_to_f90(tet_distortion, [X, D, R])),
  return()
)$

close(f)$